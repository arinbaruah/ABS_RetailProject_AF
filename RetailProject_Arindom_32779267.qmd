---
title: "Retail forecasting project"
author: "Arindom Baruah"
format: html
execute: 
  echo: false
  message: false
  warning: false
number-sections: true
---

```{r}
library(fpp3)
library(tidyverse)
library(kableExtra)
library(latex2exp)
library(plotly)
```

```{r}
#| eval: false

library(fpp3)
get_my_data <- function(student_id) {
  set.seed(student_id)
  all_data <- readr::read_rds("https://bit.ly/monashretaildata")
  while(TRUE) {
    retail <- filter(all_data, `Series ID` == sample(`Series ID`, 1))
    if(!any(is.na(fill_gaps(retail)$Turnover))) return(retail)
  }
}
# Replace the argument with your student ID
retail <- get_my_data(32779267)
```


```{r}
get_my_data <- function(student_id) {
  set.seed(student_id)
  all_data <- fill_gaps(readr::read_rds("https://bit.ly/monashretaildata"))
  while(TRUE) {
    retail <- filter(all_data, `Series ID` == sample(`Series ID`, 1)) 
    if(!any(is.na(retail$Turnover))) return(retail)
  }
}
# Replace the argument with your student ID
retail <- get_my_data(32779267)

```


# Statistical features of the data


## Complete timeseries data {#sec-overall}

Let us observe the time series data for the turnover generated.

```{r}
#| label: fig-turnover
#| fig-cap: "Footwear and personal accessory retailing turnover \n in Western Australia over time"
retail %>% autoplot(Turnover) + labs(x = "Timeline (in Months)",y = "Turnover (mil $)",title="Footwear and personal accessory retailing turnover \n in Western Australia over time",caption = "Source: Australian Bureau of Statistics") + geom_point(data = NULL, aes(x = "2020-02-15", y = 50), color = "red", shape = 1, size = 7) + theme_minimal()


```
:::{.callout-note}
# Key takeaway

Based on @fig-turnover we can observe the following details in the timeseries plot:

1. There appears to be a seasonality in the plot with a peak being observed on every December of a year. __The seasonality additionally appears to be consistent throughout the plot.__

2. The amplitude of the peaks observed in the data appear to be increasing with time. __This indicates that the variation in seasonality of the data is multiplicative in nature.__

3. The plot also indicates the presence of an __additive trend__ in the data with overall turnover increasing every year except for the year of 2020 in an __approximate linear fashion.__ 

4. There appears to be an __outlier in the data during the year of 2020__ as indicated by the <span style=color:red>red cricle</span>. While we expect a drop in retailing turnover in the early months of a year due to a strong retailing period in the previous December, however, __in the year of 2020, the drop in turnover was considerably lower than all the other years.__ This is expected to be caused due to __shutting down of businesses and their activities in the initial part of the COVID-19 pandemic.__
:::

## Variations of trade within a year {#sec-season}



```{r}
#| label: fig-seasonplot
#| fig-cap: "Variation of footwear and personal accessory retailing turnover \n within a year in Western Australia"


ggplotly(retail %>% gg_season(Turnover) + labs(x = "Month",y = "Turnover (mil $)",title="Variation of footwear and personal accessory retailing turnover \n within a year in Western Australia",caption = "Source: Australian Bureau of Statistics")  + theme_minimal(),tooltip = c("Turnover","Month"))

```
:::{.callout-note} 
# Key takeaway
@fig-seasonplot illustrates the variation of turnover within each year generated by the retailers in Western Australia each year. Some key observations are as follows:

1. The turnover generated in Western Australia has been on a rise each year. This suggests that the expenditure of people on footwear and personal accessory retailing services in WA have been increasing each year and could be attributed to the growing population in the state. 

2. We observe that the retailing turnovers in each year are __generally higher in the months of November and December__. This could be a result of the festive period when there are many customers purchasing gifts for families and friends or due to the __special sales promotions such as Boxing Day sales.__

3. Additionally, the month of November also includes the __Black Friday sale__ which attracts multiple customers to purchase items __due to specialised and limited time promotions.__ This may explain the slight rise in turnover during the month of November each year.

4. The __rise in the retail turnovers for the month of December is especially higher during the more recent years (2011-2021)__. This could again be an indicator for the growing population in the country during this period, which has gone on to to create a bigger market and drive sales, hence, contributing to the higher turnover.

5. There appears to be __one single year when the retail turnover dropped steeply in the month of April but eventually picked up for the rest of the year.__ This could be an indicator of the effects of the COVID-19 lockdown when the business activities were very limited and prevented multiple retailers in various regions of Australia, including the state of Western Australia to be able to generate revenue.

:::

## Comparison of turnovers in each month of retail trade

```{r}
#| label: fig-subseries
#| fig-cap: "Variation of footwear and personal accessory retailing turnover in each month of a year in Australia"

retail %>% gg_subseries(Turnover) + labs(x = "Year",y = "Turnover (mil $)",title="Variation of footwear and personal accessory retailing turnover \n in each month of a year in Western Australia",caption = "Source: Australian Bureau of Statistics")  
```

:::{.callout-note}
# Key takeaway

@fig-subseries illustrates the variation of retailing turnover faceted by each month and plotted against years. Key observations are as follows:

1. As already observed in @sec-season, the plot suggests that the __retailing turnover has increased each year from 1990 to 2022.__

2. The average __retail turnover is observed to be higher for the month of December when compared to the rest of the year.__ As explained previously, the main driver for the boost of retailing turnover in this period is attributed to the festive season which includes __Christmas, Boxing Day and the run up to the New Year Eve.__

3. A __drop in retail turnover for the months of March, April and May was observed in 2020.__ This can be attributed to the lockdowns set in place when the pandemic outbreak was first experienced.
:::

# Transformation and differencing of the data {#sec-transform}


In @sec-overall, we have determined that the timeseries data in hand has multiplicative variation in seasonality and a linear trend. This inadvertantly means that we are dealing with non-stationary data.

Converting a non-stationary data to a stationary data is done through the following steps:

## Box-Cox Transformation

In order to apply the Box-Cox transformation, we are required to obtain the appropriate value of the parameter $\lambda$ which will allow us to analyse the timeseries data with the seasonal variations being equal at all levels, thereby transforming the multiplicative variation in the data into an additive variation.

Let us perform a log transformation by using $\lambda = 0$.


```{r}
#| label: fig-transform-log
#| fig-cap: "Transformation of the annual retailing turnover by Log transformation"

lambda = 0 # Log transformation

retail |>
  autoplot(box_cox(Turnover, 0)) +
  labs(y = "Log of Turnover (mil $)",x = "Timeline (in Months)",
       title = latex2exp::TeX(paste0(
         "Transformed annual retailing turnover with $\\lambda$ = ",
         round(lambda,2))),caption = "Source: Australian Bureau of Statistics") + theme_minimal()
```

:::{.callout-note}
# Key takeaway

@fig-transform-log illustrates the timeseries data for retailing turnover after being transformed through the Box-Cox transformation on the log scale. Here are some key observations:

1. We observe that unlike the original data, the variation in seasonality of the Log transformed data was much more similar through the timeseries.

2. Using the Log transformation, the datapoints with lower seasonality variation (data in the initial time period) was stretched to larger variations while the datapoints with higher seasonality variation (data in the later time period) was compressed to relatively smaller variations.

3. Since the variations are fairly consistent throughout the entire period of the data, we can consider the transformed data to contain an additive variation of seasonality.

4. Usage of a __log transformation also provides better interpretability as changes in a log value are proportional to changes on the original scale, multiplied by a factor.__

:::


## Seasonal differencing

Now that we have transformed the data such that the variation of the peaks and troughs are consistent and do not change with the level of the timeseries, now we shall attempt to seasonally difference the data.


```{r}
#| label: fig-seasonaldiff
#| fig-cap: "Seasonal differencing of the timeseries data"

retail %>%
  gg_tsdisplay(
    Turnover %>%
      box_cox(lambda = 0.3) %>%
      difference(lag = 12),
    plot_type = "partial") + labs(y = "Annual change in Log(Turnover)") 
```

```{r}
lb_pvalue <- retail %>%
  mutate(diff_turnover = difference(Turnover)) |>
  features(diff_turnover, ljung_box, lag = 10) %>% pull(lb_pvalue)
```



:::{.callout-note}
# Key takeaway

Based on @fig-seasonaldiff, we observe that:

- The timeseries data of the log of turnover after seasonally differencing appears to be non stationary and centred around 0, with the exception of a few outliers in 2020 as a result of the effects of COVID-19. As a result, we have __successfully extracted both the seasonality and the trend of the data.__

- Based on the ACF plot, we can see that __the autocorrelation at lag 12 (or at end of the year) is still significant__, but becomes insignificant from there on.

- To check whether the seasonally differenced data appears as white noise, we perform a Ljung-Box test. The Ljung-box P-value for the above timeseries is __`r lb_pvalue`__ which is less than 0.05, __thereby suggesting that the timeseries data after transformation and seasonal differencing indeed appears to be white noise, and hence stationary in nature.__

- As seasonally differencing the transformed data appears to have removed both the seasonality and trend, we do not require to perform further regular differencing of the data.
:::

# Methodology for creating a list of ARIMA and ETS models

:::{.callout-warning}
# Note

- ETS models designed to handle both trend and seasonality in the data. Hence, __to obtain an ETS model, we will work with the un-transformed retail data.__ 

- The __ARIMA model cannot handle data which varies with time__, which is the case for the retail data. As a result, we will __utilise the stationary data__ worked out in @sec-transform to fit these models. 

- While exponential smoothing models are based on a description of the trend and seasonality in the data, ARIMA models aim to describe the autocorrelations in the data.

:::

## Splitting into train and test data

As a first step, we will split our data into train and test data. Let us allocate the final 2 years as the test dataset while the remaining data will be utilised as the training data for the models to fit.

```{r}
#| echo: true
#| code-fold: true

retail_train <- retail %>% filter(Month <= yearmonth("2020 Dec"))
retail_test <- retail %>% filter(Month > yearmonth("2020 Dec"))
```


## Creating an ETS model

Based on our analysis of @fig-turnover, we have established that our data contains a linear trend and a multiplicative variation in seasonality. Hence, while fitting the ETS model, we will keep these in mind. We are mainly interested to evaluate the following two models for the current timeseries data:

1. Default ETS model
2. ETS model with multiplicative errors, additive trend and multiplicative seasonality (MAM model)


```{r}
#| echo: true
#| code-fold: true
fit_ets <- retail_train %>%
  model(mam=ETS(Turnover ~ error("M") + trend("A")+ season("M")),
        ets_default = ETS(Turnover)) 
```

Let us check the default model identified by the ETS algorithm.

```{r}
#| label: tbl-ets
#| tbl-cap: "Fitted ETS models"

fit_ets %>% kbl()
```

:::{.callout-note}
# Key takeaway

As we can observe from @tbl-ets, the default ETS model fitted a "MAdM" model which is expected to produce forecasts with damped trends.
:::